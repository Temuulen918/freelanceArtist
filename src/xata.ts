// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "buteelch",
    columns: [
      { name: "RD", type: "string", unique: true },
      { name: "ner", type: "string" },
      { name: "ovog", type: "string" },
      { name: "tursunognoo", type: "datetime" },
      { name: "huis", type: "string", notNull: true, defaultValue: "er" },
      { name: "dugaar", type: "int", unique: true },
      { name: "bolovsrol", type: "string" },
      { name: "turshlaga", type: "string" },
      { name: "nasbarsaneseh", type: "bool", defaultValue: "false" },
      { name: "urlagChiglel", type: "string" },
      { name: "urlagSalbar", type: "string" },
      {
        name: "holboo",
        type: "string",
        notNull: true,
        defaultValue: "Байхгүй",
      },
      { name: "huselteseh", type: "bool", defaultValue: "true" },
      { name: "ustgahtailbar", type: "string" },
      { name: "nasbarsanognoo", type: "datetime" },
      { name: "burtgesenajiltan", type: "string" },
    ],
  },
  {
    name: "account",
    columns: [
      { name: "username", type: "email", unique: true },
      { name: "password", type: "string" },
      { name: "turhayg", type: "bool", defaultValue: "true" },
      { name: "turul", type: "string" },
      { name: "accid", type: "string", unique: true },
    ],
  },
  {
    name: "buteel",
    columns: [
      { name: "ner", type: "string" },
      { name: "tailbar", type: "string" },
      { name: "tuurvijduussan", type: "datetime" },
      { name: "zohiogchiinerh", type: "int", unique: true },
      { name: "link", type: "string" },
      { name: "huselteseh", type: "bool", defaultValue: "true" },
      { name: "buteelchid", type: "multiple" },
      { name: "urlagSalbar", type: "string" },
      { name: "urlagChiglel", type: "string" },
      { name: "ustgahtailbar", type: "string" },
    ],
  },
  {
    name: "holboo",
    columns: [
      { name: "ner", type: "string" },
      { name: "burtgelDugaar", type: "string" },
      { name: "TUZdarga", type: "string" },
      { name: "hayg", type: "string" },
      { name: "uilajillagaa", type: "string" },
      { name: "tsahimhayg", type: "string" },
      { name: "uusgenbaiguulsan", type: "datetime" },
      { name: "utas", type: "int", unique: true },
      { name: "tsahimshuudan", type: "email", unique: true },
      { name: "huselteseh", type: "bool", defaultValue: "true" },
      { name: "ustgahtailbar", type: "string" },
    ],
  },
  {
    name: "angilal",
    columns: [
      { name: "urlagSalbar", type: "string", unique: true },
      { name: "urlagChiglel", type: "multiple" },
    ],
  },
  {
    name: "ajiltan",
    columns: [
      { name: "ner", type: "string" },
      { name: "ovog", type: "string" },
      { name: "huis", type: "string" },
      { name: "RD", type: "string", unique: true },
      { name: "tursunognoo", type: "datetime" },
      { name: "utas", type: "int" },
    ],
  },
  {
    name: "uusmel",
    columns: [
      { name: "buteelid", type: "string" },
      { name: "ehbuteelner", type: "string" },
      { name: "ovog", type: "string" },
      { name: "ner", type: "string" },
      { name: "hel", type: "string" },
      { name: "link", type: "string" },
      { name: "tailbar", type: "string" },
    ],
  },
  { name: "testing", columns: [{ name: "file", type: "file" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Buteelch = InferredTypes["buteelch"];
export type ButeelchRecord = Buteelch & XataRecord;

export type Account = InferredTypes["account"];
export type AccountRecord = Account & XataRecord;

export type Buteel = InferredTypes["buteel"];
export type ButeelRecord = Buteel & XataRecord;

export type Holboo = InferredTypes["holboo"];
export type HolbooRecord = Holboo & XataRecord;

export type Angilal = InferredTypes["angilal"];
export type AngilalRecord = Angilal & XataRecord;

export type Ajiltan = InferredTypes["ajiltan"];
export type AjiltanRecord = Ajiltan & XataRecord;

export type Uusmel = InferredTypes["uusmel"];
export type UusmelRecord = Uusmel & XataRecord;

export type Testing = InferredTypes["testing"];
export type TestingRecord = Testing & XataRecord;

export type DatabaseSchema = {
  buteelch: ButeelchRecord;
  account: AccountRecord;
  buteel: ButeelRecord;
  holboo: HolbooRecord;
  angilal: AngilalRecord;
  ajiltan: AjiltanRecord;
  uusmel: UusmelRecord;
  testing: TestingRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Temuulen-Munkhtulga-s-workspace-eop6uq.us-east-1.xata.sh/db/myprogram",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
